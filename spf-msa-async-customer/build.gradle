buildscript {
    repositories {
    }
    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:7.4.0"
        classpath "com.smartnews:jpa-entity-generator:0.99.9"
    }
}


plugins {
    id "org.springframework.boot" version "3.2.5"
    id "io.spring.dependency-management" version "1.1.4"
    id "jacoco"
}

def packageName = 'com.nttdata.technicaltest.services'
def dirName = 'com.nttdata.technicaltest.services'
springBoot {
    mainClass = "${packageName}.MainApplication"
}


apply plugin: "java"
apply plugin: "org.openapi.generator"

group = "${packageName}"
version = "1.0.1"
sourceCompatibility = JavaVersion.VERSION_17

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext["log4j2.version"] = "2.17.1"
ext["jackson.version"] = "2.16.0"

repositories {
    mavenCentral()
}

ext {
    mapstructVersion = "1.4.2.Final"
    lombokVersion = "1.18.26"
    jjwtVersion = '0.11.5'
}


dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    //dependency Base
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-validation:3.1.3"

    //dependencies for default
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-webflux-ui', version: '1.7.0'

    // dependency from optimus
    compileOnly group: "org.projectlombok", name: "lombok", version: ""
    implementation group: "org.mapstruct", name: "mapstruct", version: "1.5.5.Final"
    annotationProcessor group: "org.mapstruct", name: "mapstruct-processor", version: "1.5.5.Final"

    implementation 'javax.persistence:javax.persistence-api:2.2'

    //dependencias para redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    implementation 'io.lettuce:lettuce-core'

    // Google Guava
    implementation 'com.google.guava:guava:33.2.0-jre'

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    //test
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "io.projectreactor:reactor-test"
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.xmlunit:xmlunit-core:2.10.0"
    testImplementation 'org.mockito:mockito-inline:5.2.0'
}

task buildSpringServer(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "spring"
    inputSpec = "$rootDir/src/main/resources/openapi.yaml".toString()
    outputDir = "$buildDir/generated".toString()
    apiPackage = "${packageName}.server"
    modelPackage = "${packageName}.model"
    library = "spring-boot"
    configOptions = [
            skipDefaultInterface                    : "false",
            useSpringBoot3                          : "true",
            useJakartaEe                            : "true",
            serializableModel                       : "true",
            dateLibrary                             : "java8",
            openApiNullable                         : "false",
            reactive                                : "true",
            apiFirst                                : "false",
            delegatePattern                         : "true",
            configPackage                           : "${packageName}.config",
            sourceFolder                            : "src/main/java",
            basePackage                             : "${packageName}",
            disallowAdditionalPropertiesIfNotPresent: "true",
            interfaceOnly                           : "true"
    ]
}

task buildSpringClientAccount(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    inputSpec = "$rootDir/src/main/resources/openapi-client-account.yaml".toString()
    generatorName = "java"
    apiPackage = "${packageName}.client.account"
    modelPackage = "${packageName}.client.account.models"
    outputDir = "$buildDir/generated".toString()
    library = "webclient"
    configOptions = [
            useSpringBoot3 : "true",
            useJakartaEe   : "true",
            openApiNullable: "false",
            sourceFolder   : "src/main/java",
            configPackage  : "${packageName}.client.config"
    ]
}

compileJava.dependsOn buildSpringServer, buildSpringClientAccount

compileJava {
    options.compilerArgs += [
            "-Amapstruct.suppressGeneratorTimestamp=true",
            "-Amapstruct.suppressGeneratorVersionInfoComment=true",
            "-Amapstruct.verbose=true",
            "-Amapstruct.defaultComponentModel=spring"
    ]
}

sourceSets.main.java.srcDirs = ["$buildDir/generated/src/main/java", "src/main/java"]

springBoot {
    buildInfo()
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [

            ])
        }))
    }
    reports {
        xml.required = true
        xml.destination file("$buildDir/jacoco/test.xml")
        html.destination file("$buildDir/jacoco/index.html")
        html.required = true
        csv.required = true
    }
}